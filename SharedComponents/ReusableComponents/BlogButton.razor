@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime jSRuntime

<button type="@InternalButtonType" disabled="@Disabled" class="@InternalCssClass"
title="@Title" @onclick="OnButtonClick">
    @ChildContent
</button>

@code {
    [CascadingParameter]
    public EditContext? EditContext { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private bool? _disabled = null;
    private string? _disabledHelpText = "";
    private string formErrors = "";

    [Parameter]
    public bool Disabled
    {
        get
        {
            if (_disabled != null && (_disabled == null || _disabled.Value))
            {
                return _disabled!.Value;
            }

            if (EditContext == null)
            {
                return false;
            }

            formErrors = "";
            if (!TryGetValidationMessages(out var validationMessages))
            {
                return true;
            }

            foreach (var m in validationMessages)
            {
                formErrors += m + (MarkupString)" \r\n";
            }

            return !EditContext.IsModified() || validationMessages.Any();
        }

        set => _disabled = value;
    }

    private bool TryGetValidationMessages(out string[] validationMessages)
    {
        validationMessages = Array.Empty<string>();
        if (EditContext == null)
        {
            return false;
        }

        validationMessages = EditContext.GetValidationMessages().ToArray();
        return !validationMessages.Any();
    }

    private string? Title => Disabled && !string.IsNullOrWhiteSpace(DisabledHelpText)
        ? DisabledHelpText : HelpText;

    [Parameter]
    public string? DisabledHelpText
    {
        get { return _disabledHelpText + (MarkupString)"\r\n" + formErrors; }
        set { _disabledHelpText = value; }
    }
    public string? HelpText { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    private string InternalButtonType => OnClick.HasDelegate ? "button" : "submit";

    private async Task OnButtonClick(EventArgs args)
    {
        if (OnClick.HasDelegate && await ShouldExecute())
        {
            await OnClick.InvokeAsync(args);
        }
    }

    [Parameter] public ButtonType Type { get; set; }
    private string InternalCssClass
    {
        get
        {
            return Type switch
            {
                ButtonType.Save => "btn btn-success",
                ButtonType.Cancel => "btn btn-danger",
                ButtonType.Delete => "btn btn-danger",
                ButtonType.Remove => "btn btn-danger",
                ButtonType.Select => "btn btn-primary",
                _ => "btn btn-primary"
            };
        }
    }

    private IJSObjectReference? jsModule;
    private bool isJsModuleLoaded = false;

    [Parameter]
    public string? ConfirmMessage { get; set; }

    private async Task<bool> ShouldExecute()
    {
        if (string.IsNullOrEmpty(ConfirmMessage))
        {
            return true;
        }
        
        if (!isJsModuleLoaded)
        {
            jsModule = await jSRuntime.InvokeAsync<IJSObjectReference>("import", "/_content/SharedComponents/ReusableComponents/BlogButton.razor.js");
            isJsModuleLoaded = true;
        }

        if (jsModule != null)
        {
            return await jsModule.InvokeAsync<bool>("showConfirm", ConfirmMessage);
        }

        return false; 
    }
}